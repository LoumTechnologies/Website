@page "/support"
@layout EmptyLayout
@using System.ComponentModel.DataAnnotations
@inject IJSRuntime JSRuntime



<div class="text-secondary" data-pg-collapsed>
    <header data-pg-collapsed>
        <nav class="bg-primary border-bottom navbar navbar-dark navbar-expand-lg py-lg-1" data-pg-collapsed>
            <div class="container"> <a class="fw-bold navbar-brand text-uppercase" href="/">Loum Technologies</a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNavDropdown-4" aria-controls="navbarNavDropdown-4" aria-expanded="false" aria-label="Toggle navigation"> <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse " id="navbarNavDropdown-4">
                    <ul class="navbar-nav">
                        <li class="nav-item">
                        </li>
                        <li class="nav-item">
                        </li>
                        <li class="nav-item">
                        </li>
                        <li class="nav-item">
                        </li>
                        <li class="nav-item">
                        </li>
                    </ul>
                </div>
            </div>
        </nav>
    </header>
    <main data-pg-collapsed>
        <div class="container">
            <h2>Customer Support</h2>

            <EditForm Model="@supportRequest" OnValidSubmit="SubmitForm">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group">
                    <label for="name">Name:</label>
                    <InputText id="name" @bind-Value="supportRequest.Name" class="form-control" />
                    <ValidationMessage For="@(() => supportRequest.Name)" />
                </div>

                <div class="form-group">
                    <label for="email">Email:</label>
                    <InputText id="email" @bind-Value="supportRequest.Email" class="form-control" />
                    <ValidationMessage For="@(() => supportRequest.Email)" />
                </div>

                <div class="form-group">
                    <label for="subject">Subject:</label>
                    <InputText id="subject" @bind-Value="supportRequest.Subject" class="form-control" />
                    <ValidationMessage For="@(() => supportRequest.Subject)" />
                </div>

                <div class="form-group">
                    <label for="message">Message:</label>
                    <InputTextArea id="message" @bind-Value="supportRequest.Message" class="form-control" rows="5" />
                    <ValidationMessage For="@(() => supportRequest.Message)" />
                </div>

                <button type="submit" class="btn btn-primary">Submit</button>
            </EditForm>

            @if (!string.IsNullOrEmpty(statusMessage))
            {
                <div class="alert @statusClass mt-3" role="alert">
                    @statusMessage
                </div>
            }
        </div>
    </main>
    <footer class="bg-dark pt-5 text-white">
        <div class="container">
            <div class="row">
                <div class="col-xl-4 me-auto py-3"> <a href="#" class="d-inline-block h2 mb-4 text-decoration-none text-uppercase text-white-50">Loum Technologies</a>
                    <p class="mb-3">We'd love to talk!</p>
                    <div class="mb-4">                                                   <a href="mailto:hello@loumtechnologies.com" class="link-light text-decoration-none">hello@loumtechnologies.com</a>
                    </div>
                </div>
                <div class="col-sm-4 col-xl-2 py-3">
                    <ul class="list-unstyled">
                        <li class="mb-3"> <a href="/support" class="link-light text-decoration-none">Support</a>
                        </li>
                    </ul>
                </div>
            </div>
            <div class="pb-3 pt-3 text-center">
                <hr class="border-secondary mt-0">
                <p class="mb-0">Copyright &copy; 2025 Loum Technologies, LLC</p>
            </div>
        </div>
    </footer>
    <script src="assets/js/popper.min.js"></script>
    <script src="bootstrap/js/bootstrap.min.js"></script>
</div>

@code {
    private SupportRequest supportRequest = new SupportRequest();
    private string statusMessage = "";
    private string statusClass = "";

    private async Task SubmitForm()
    {
        try
        {
            string mailtoLink = GenerateMailtoLink();
            await JSRuntime.InvokeVoidAsync("open", mailtoLink, "_blank");

            statusMessage = "Support request email has been prepared. Please send it from your email client.";
            statusClass = "alert-success";
            supportRequest = new SupportRequest();
        }
        catch (Exception ex)
        {
            statusMessage = $"An error occurred: {ex.Message}";
            statusClass = "alert-danger";
        }
    }

    private string GenerateMailtoLink()
    {
        string supportEmail = "support@loumtechnologies.com";
        string encodedSubject = Uri.EscapeDataString($"Support Request: {supportRequest.Subject}");
        string encodedBody = Uri.EscapeDataString($"Name: {supportRequest.Name}\nEmail: {supportRequest.Email}\n\nMessage:\n{supportRequest.Message}");
        return $"mailto:{supportEmail}?subject={encodedSubject}&body={encodedBody}";
    }

    public class SupportRequest
    {
        [Required(ErrorMessage = "Name is required.")]
        public string Name { get; set; }

        [Required(ErrorMessage = "Email is required.")]
        [EmailAddress(ErrorMessage = "Invalid email address.")]
        public string Email { get; set; }

        [Required(ErrorMessage = "Subject is required.")]
        public string Subject { get; set; }

        [Required(ErrorMessage = "Message is required.")]
        public string Message { get; set; }
    }
}
